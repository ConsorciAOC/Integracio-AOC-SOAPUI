<?xml version="1.0" encoding="UTF-8"?>
<envio xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="anuncios_notificacion-v1.1.xsd">
   <version>1.0.0</version>
   <anuncios>
      <remitente>
         <nodoRemitente nivel="1" idDir3="A99999999">COMUNIDADES AUTONOMAS</nodoRemitente>
         <nodoRemitente nivel="2" idDir3="A09002970">GENERALITAT DE CATALUNYA</nodoRemitente>
         <nodoRemitente nivel="3" idDir3="A09002977">DEPARTAMENT DE GOVERNACIÓ I RELACIONS INSTITUCIONAL</nodoRemitente>
         <nodoRemitente nivel="4" idDir3="A09006303">CONSORCI ADMINISTRACIÓ OBERTA DE CATALUNYA</nodoRemitente>
      </remitente>
      <fechaPub>2017-02-08</fechaPub>
      <infPub>
         <urlSW>http://10.127.34.41/prjModalitatsBOEWeb/processes/boe/serveis/ServicioControlPublicacionv10.jws</urlSW>
         <email>aaaaaa@aoc.cat</email>
      </infPub>
      <anuncio>
         <emisor>
            <nodoEmisor nivel="1" idDir3="LA9999999">ENTIDADES LOCALES</nodoEmisor>
            <nodoEmisor nivel="2" idDir3="L01080193">Ayuntamiento de Barcelona</nodoEmisor>
         </emisor>
         <metadatos>
            <formPub>E</formPub>
            <datosPersonales>S</datosPersonales>
            <materias>
               <materia idMat="1">AGRICULTURA Y GANADERÍA</materia>
               <materia idMat="2">AGUAS</materia>
               <materia idMat="3">CATASTRO</materia>
               <materia idMat="4">CAZA Y PESCA</materia>
            </materias>
            <lgt>S</lgt>
            <procedimiento plural="N">de naturaleza tributaria</procedimiento>
            <notificados>
               <notificado tipId="NIF" id="NIF">NOMBRE NIF</notificado>
               <notificado tipId="NAF" id="NAF">NOMBRE NAF</notificado>
               <notificado tipId="EXP" id="EXP">NOMBRE EXP</notificado>
               <notificado tipId="CCC" id="CCC">NOMBRE CCC</notificado>
            </notificados>
         </metadatos>
         <contenido>
            <texto content-type="application/xml">
               <p class="parrafo">Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>
               <p class="parrafo">Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>
               <p class="parrafo">Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>
               <p class="parrafo">Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>
            </texto>
            <pieFirma>
               <lugar>Barcelona</lugar>
               <fecha>2017-02-08</fecha>
               <firmante>aaaaaaa aaaaa</firmante>
            </pieFirma>
         </contenido>
      </anuncio>
   </anuncios>
</envio>